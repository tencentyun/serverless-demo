const CosMultipartUploadExpectSizeStreamController = require('./CosMultipartUploadExpectSizeStreamController');
const CosMultipartUploadUnknowSizeStreamController = require('./CosMultipartUploadUnknowSizeStreamController');
const CosMultipartUploadExpectSizeTaskController = require('./CosMultipartUploadExpectSizeTaskController');
const CosSingleUploadTaskController = require('./CosSingleUploadTaskController');
const {
  streamPipelinePromise,
  getEmptyReadStream,
  checkReadStreamEmpty,
} = require('./common/utils');

class CosUpload {
  /**
   * @param {Object} options
   * @param {Object} options.cos - the constructor's parameter of cos-nodejs-sdk-v5, reference documents: https://github.com/tencentyun/cos-nodejs-sdk-v5, you can set cosSdkInstance or cos
   * @param {Object} options.cosSdkInstance - an instance of cos-nodejs-sdk-v5, reference documents: https://github.com/tencentyun/cos-nodejs-sdk-v5, you can set cosSdkInstance or cos
   * @param {Number} options.defaultChunkSize - the default chunk size of cos multiple upload, the unit is byte
   * @param {String} options.mode - the way to get upload id, NEW_UPLOAD_ID_ONLY or ALL_UPLOAD_ID_ALLOW
   * @param {Boolean} options.defaultHashCheck - use hash check
   *
   * @example
   * new CosUpload({
   *  cos: {
   *    SecretId: 'xxxxxx',
   *    SecretKey: 'xxxxxx'
   *  },
   *  defaultChunkSize: 8 * 1024 * 1024,
   *  mode: 'NEW_UPLOAD_ID_ONLY',
   *  defaultHashCheck: true,
   * })
   */
  constructor({
    cacheData = {},
    maxTryTimes = 3,
    defaultHashCheck = true,
    putObjectLimit = 5 * 1024 * 1024 * 1024,
    ...args
  }) {
    const cosMultipartUploadExpectSizeStreamController =      new CosMultipartUploadExpectSizeStreamController({
      cacheData,
      maxTryTimes,
      defaultHashCheck,
      ...args,
    });
    const cosMultipartUploadUnknowSizeStreamController =      new CosMultipartUploadUnknowSizeStreamController({
      cacheData,
      maxTryTimes,
      defaultHashCheck,
      ...args,
    });
    const cosMultipartUploadExpectSizeTaskController =      new CosMultipartUploadExpectSizeTaskController({
      cacheData,
      maxTryTimes,
      defaultHashCheck,
      ...args,
    });
    const cosSingleUploadTaskController = new CosSingleUploadTaskController({
      cacheData,
      maxTryTimes,
      defaultHashCheck,
      ...args,
    });
    Object.assign(this, {
      cacheData,
      maxTryTimes,
      defaultHashCheck,
      putObjectLimit,
      cosMultipartUploadExpectSizeStreamController,
      cosMultipartUploadUnknowSizeStreamController,
      cosMultipartUploadExpectSizeTaskController,
      cosSingleUploadTaskController,
    });
  }
  /**
   * @param {Object} options
   * @param {Object} options.object
   * @param {String} options.object.Bucket
   * @param {String} options.object.Region
   * @param {String} options.object.Key
   * @param {Number} options.object.ContentLength
   * @param {String} options.uuid
   * @param {Number} options.chunkSize
   * @param {Boolean} options.hashCheck
   */
  getStream(params) {
    if (
      params.object.ContentLength === undefined
      || params.object.ContentLength === null
    ) {
      return this.cosMultipartUploadUnknowSizeStreamController.getStream(params);
    }
    return this.cosMultipartUploadExpectSizeStreamController.getStream(params);
  }
  /**
   * @param {Object} options
   * @param {Object} options.object
   * @param {String} options.object.Bucket
   * @param {String} options.object.Region
   * @param {String} options.object.Key
   * @param {Number} options.object.ContentLength
   * @param {String} options.uuid
   * @param {Number} options.chunkSize
   * @param {Number} options.parallel
   * @param {Function} options.getReadStream
   * @param {Function} options.getRangeReadStream
   * @param {Boolean} options.hashCheck
   */
  async runTask({
    object,
    getReadStream,
    getRangeReadStream,
    putObjectLimit,
    hashCheck,
    ...args
  }) {
    if (object.ContentLength !== undefined && object.ContentLength !== null) {
      if (object.ContentLength > 0 && getRangeReadStream) {
        const result =          await this.cosMultipartUploadExpectSizeTaskController.runTask({
          object,
          getReadStream: getRangeReadStream,
          hashCheck,
          ...args,
        });
        return result;
      }
      if (object.ContentLength <= (putObjectLimit || this.putObjectLimit)) {
        const result = await this.cosSingleUploadTaskController.runTask({
          object,
          getReadStream,
          hashCheck,
          ...args,
        });
        return result;
      }
    }
    let error;
    for (let i = 0; i < this.maxTryTimes; i += 1) {
      try {
        let readStream = getReadStream();
        if (readStream.then && typeof readStream.then === 'function') {
          readStream = await readStream;
        }
        let result;
        if (
          object.ContentLength !== undefined
          && object.ContentLength !== null
        ) {
          result = await streamPipelinePromise([
            readStream,
            await this.getStream({
              object,
              hashCheck,
              ...args,
            }),
          ]);
        } else {
          const { isEmpty = false } = await checkReadStreamEmpty({
            readStream,
          });
          if (isEmpty) {
            result = await this.cosSingleUploadTaskController.runTask({
              object: {
                ...object,
                ContentLength: 0,
              },
              getReadStream: getEmptyReadStream,
              hashCheck,
              ...args,
            });
          } else {
            result = await streamPipelinePromise([
              readStream,
              await this.getStream({
                object,
                hashCheck,
                ...args,
              }),
            ]);
          }
        }
        error = null;
        return result;
      } catch (err) {
        error = err;
      }
    }
    throw error;
  }
}

module.exports = CosUpload;
