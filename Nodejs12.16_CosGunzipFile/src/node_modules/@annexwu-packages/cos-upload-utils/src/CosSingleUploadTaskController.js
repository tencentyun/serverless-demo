/* eslint-disable no-param-reassign */
const CosMultipartUploadBase = require('./CosMultipartUploadBase');
const { addCRC64TransformStream } = require('./common/utils');

class CosSingleUploadTaskController extends CosMultipartUploadBase {
  /**
   * @param {Object} options
   * @param {Object} options.object
   * @param {String} options.object.Bucket
   * @param {String} options.object.Region
   * @param {String} options.object.Key
   * @param {String} options.uuid
   * @param {Function} options.getReadStream
   * @param {Boolean} options.hashCheck
   */
  async runTask({
    object: { Bucket, Region, Key, ContentLength, ...args },
    uuid = '',
    getReadStream,
    hashCheck,
  }) {
    hashCheck = this.getHashCheck(hashCheck);
    uuid = `${Bucket}-${Region}-${Key}-${'unknow'}-${
      ContentLength || 'unknow'
    }-${uuid}`;
    const defaultCacheData = {
      object: {
        Bucket,
        Region,
        Key,
        ContentLength,
        ...args,
      },
      process: {},
      getReadStream,
      hashCheck,
    };
    this.cacheData[uuid] = this.cacheData[uuid] || defaultCacheData;
    try {
      const result = await this.putObject({ uuid });
      return result;
    } catch (err) {
      if (err.code === 'NoSuchUpload') {
        delete this.cacheData[uuid];
      }
      throw err;
    }
  }
  async putObject({ uuid }) {
    const { Bucket, Region, Key, ContentLength, ...multipartInitParams } =      this.cacheData[uuid].object;
    const { getReadStream, hashCheck } = this.cacheData[uuid];
    let crc64Hash = '';
    const data = await this.cosSdkInstance.putObjectRetry({
      Bucket,
      Region,
      Key,
      ...multipartInitParams,
      GetBody: async () => {
        const stream = await getReadStream();
        if (hashCheck) {
          return addCRC64TransformStream({
            stream,
            onHash: hash => (crc64Hash = hash),
          });
        }
        return stream;
      },
    });
    if (hashCheck && crc64Hash !== data.headers['x-cos-hash-crc64ecma']) {
      throw {
        crc64Hash,
        headers: data.headers,
      };
    }
    delete this.cacheData[uuid];
    return data;
  }
}

module.exports = CosSingleUploadTaskController;
