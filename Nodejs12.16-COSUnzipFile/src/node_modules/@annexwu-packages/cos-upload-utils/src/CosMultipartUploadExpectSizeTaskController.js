/* eslint-disable no-param-reassign */
const Async = require('async');
const CosMultipartUploadBase = require('./CosMultipartUploadBase');
const { addCRC64TransformStream } = require('./common/utils');

class CosMultipartUploadExpectSizeTaskController extends CosMultipartUploadBase {
  /**
   * @param {Object} options
   * @param {Object} options.object
   * @param {String} options.object.Bucket
   * @param {String} options.object.Region
   * @param {String} options.object.Key
   * @param {Number} options.object.ContentLength
   * @param {String} options.uuid
   * @param {Number} options.chunkSize
   * @param {Number} options.parallel
   * @param {Function} options.getReadStream
   * @param {Boolean} options.hashCheck
   */
  async runTask({
    object: { Bucket, Region, Key, ContentLength, ...args },
    uuid = '',
    chunkSize,
    parallel = 3,
    getReadStream,
    hashCheck,
  }) {
    chunkSize = chunkSize || this.getDefaultChunkSize(ContentLength);
    hashCheck = this.getHashCheck(hashCheck);
    uuid = `${Bucket}-${Region}-${Key}-${chunkSize}-${
      ContentLength || 'unknow'
    }-${uuid}`;
    const defaultCacheData = {
      object: {
        Bucket,
        Region,
        Key,
        ContentLength,
        ...args,
      },
      process: {},
      chunkSize,
      parallel,
      getReadStream,
      hashCheck,
    };
    this.cacheData[uuid] = this.cacheData[uuid] || defaultCacheData;
    try {
      await this.multipartInit({ uuid });
      await this.multipartListPart({ uuid });
      await this.multipartUpload({ uuid });
      const result = await this.multipartComplete({ uuid });
      return result;
    } catch (err) {
      if (err.code === 'NoSuchUpload') {
        delete this.cacheData[uuid];
      }
      throw err;
    }
  }
  multipartUpload({ uuid }) {
    const { ContentLength } = this.cacheData[uuid].object;
    const { chunkSize, parallel = 3 } = this.cacheData[uuid];
    const count = Math.ceil(ContentLength / chunkSize);
    const partNumberList = Array(count)
      .fill(0)
      .map((item, index) => index + 1);

    return new Promise((resolve, reject) => {
      Async.mapLimit(
        partNumberList,
        parallel,
        async (partNumber) => {
          try {
            const result = await this.multipartUploadOnePart({
              uuid,
              partNumber,
            });
            return result;
          } catch (error) {
            if (error.statusCode === 403) {
              throw error;
            }
            return {
              error,
            };
          }
        },
        (err, results) => {
          if (err) {
            reject(err);
            return;
          }
          const errors = results
            .map(item => item && item.error)
            .filter(Boolean);
          if (errors.length) {
            reject(errors);
          } else {
            resolve();
          }
        },
      );
    });
  }
  async multipartUploadOnePart({ uuid, partNumber }) {
    if (this.checkPart({ uuid, partNumber })) {
      return;
    }
    const { Bucket, Region, Key, ContentLength } = this.cacheData[uuid].object;
    const { UploadId } = this.cacheData[uuid].process;
    const { chunkSize, getReadStream, hashCheck } = this.cacheData[uuid];
    const streamSize =      chunkSize * partNumber <= ContentLength
      ? chunkSize
      : ContentLength - chunkSize * (partNumber - 1);
    const start = chunkSize * (partNumber - 1);
    const end = start + streamSize;
    let crc64Hash = '';
    const data = await this.cosSdkInstance.multipartUploadRetry({
      Bucket,
      Region,
      Key,
      UploadId,
      PartNumber: partNumber,
      ContentLength: streamSize,
      GetBody: async () => {
        const stream = await getReadStream(start, end);
        if (hashCheck) {
          return addCRC64TransformStream({
            stream,
            onHash: hash => (crc64Hash = hash),
          });
        }
        return stream;
      },
    });
    if (hashCheck && crc64Hash !== data.headers['x-cos-hash-crc64ecma']) {
      this.updateParts({ uuid, partNumber, etag: '' });
      throw {
        crc64Hash,
        headers: data.headers,
      };
    } else {
      this.updateParts({ uuid, partNumber, etag: data.ETag });
    }
  }
}

module.exports = CosMultipartUploadExpectSizeTaskController;
