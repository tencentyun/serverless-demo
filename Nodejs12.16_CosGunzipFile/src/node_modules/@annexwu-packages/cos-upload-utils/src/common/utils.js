const { pipeline, PassThrough } = require('stream');
const {
  CRC64TransformStream,
} = require('@annexwu-packages/simple-stream-utils');

/**
 * get retry function
 */
function retry({ maxTryTime = 3, func }) {
  return async (...args) => {
    let err;
    let tryTime = 0;
    while (tryTime < maxTryTime) {
      tryTime += 1;
      try {
        const res = await func(...args);
        return res;
      } catch (e) {
        err = e;
      }
    }
    throw err;
  };
}

/**
 * get stream pipeline promise
 */
function streamPipelinePromise(streams) {
  return new Promise((resolve, reject) => {
    const lastStream = streams[streams.length - 1];
    lastStream.on('finish', resolve);
    pipeline(streams, (err) => {
      if (err) {
        reject(err);
      }
    });
  });
}

/**
 * get an empty readable stream
 */
function getEmptyReadStream() {
  const stream = new PassThrough();
  stream.end(Buffer.from(''));
  return stream;
}

/**
 * check if a readable stream is empty
 */
function checkReadStreamEmpty({ readStream }) {
  return new Promise((resolve) => {
    readStream.once('readable', () => resolve({ isEmpty: readStream.readableLength === 0 }));
  });
}

/**
 * add CRC64TransformStream
 */
function addCRC64TransformStream({ stream, onHash }) {
  const crc64TransformStream = new CRC64TransformStream();
  crc64TransformStream.on('hash', onHash);
  stream.on('error', err => crc64TransformStream.emit('error', err));
  stream.pipe(crc64TransformStream);
  return crc64TransformStream;
}

module.exports = {
  retry,
  streamPipelinePromise,
  getEmptyReadStream,
  checkReadStreamEmpty,
  addCRC64TransformStream,
};
